name: Continuous Deploymentt

on:
  # workflow_run:
  #   workflows: ["image-build"]
  #   types: 
  #     - completed
  #   branches:
  #     - main
  pull_request:
    branches:
      - main 

jobs:
  continuous-deployment:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Install Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 20
  
    - name: Set up Google Cloud SDK
      uses: google-github-actions/auth@v2
      with:
        credentials_json: '${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}'
    
    - name: Fetch existing VM configuration
      id: fetch-vm
      run: |
        EXISTING_VM_NAME=$(gcloud compute instances list --filter="name:${{ vars.VM_PREFIX }}*" --format="get(NAME)" --limit=1)
        echo "Existing VM Name: $EXISTING_VM_NAME"
        echo "::set-output name=exisitngVMName::$EXISTING_VM_NAME"
    
    - name: Get Latest Image Name
      id: get-latest-image
      run: |
        LATEST_IMAGE=$(gcloud compute images list --project=${{ secrets.PROJECT_ID }} --filter="name:${{ vars.IMAGE_NAME }}" --format="get(NAME)" --limit=1)
        echo "Latest Image: $LATEST_IMAGE"
        echo "::set-output name=latestImage::$LATEST_IMAGE"

    - name: Create Instance Template
      run: |
        TEMPLATE_NAME="${{ vars.TEMPLATE_NAME }}"
        NEW_TEMPLATE_NAME="$TEMPLATE_NAME-$(date +%s)" 
        gcloud compute instance-templates create $NEW_TEMPLATE_NAME \
          --machine-type=e2-standard-2 \
          --image=projects/yash-cloud/global/images/${{ steps.get-latest-image.outputs.latestImage }} \
          --region=${{ vars.REGION }} \
          --network=webapp-network \
          --subnet=webapp \
          --boot-disk-size=100GB \
          --boot-disk-auto-delete \
          --boot-disk-type=pd-balanced \
          --boot-disk-kms-key=${{ vars.KMS_KEY_PATH }} \
          --metadata startup-script="#! /bin/bash
              echo HOST=${{ vars.GCP_HOST }} >> /opt/csye6225/webapp/.env
              echo DB_NAME=${{ vars.GCP_DB }} >> /opt/csye6225/webapp/.env
              echo DB_USERNAME=${{ vars.GCP_USER }} >> /opt/csye6225/webapp/.env
              echo DB_PASS=${{ secrets.GCP_PASS }} >> /opt/csye6225/webapp/.env
              echo PUBSUB_TOPIC=${{ vars.PUBSUB_TOPIC_NAME }} >> /opt/csye6225/webapp/.env
              echo PORT=${{ vars.PORT }} >> /opt/csye6225/webapp/.env
              echo DIALECT=mysql >> /opt/csye6225/webapp/.env
              systemctl daemon-reload
              systemctl enable webapp
              systemctl start webapp
              systemctl status webapp
            " \
          --service-account=${{ vars.VM_SA_EMAIL }} \
          --scopes=cloud-platform \
          --maintenance-policy=MIGRATE \
          --restart-on-failure \
          --tags=webapp-vm-template,allow-health-check
        echo "New Template Name: $NEW_TEMPLATE_NAME"
        echo "NEW_TEMPLATE_NAME=$NEW_TEMPLATE_NAME" >> $GITHUB_ENV

    - name: Update Managed Instance Group
      run: |
        gcloud compute instance-groups managed set-instance-template ${{ vars.MIG_NAME }} \
          --template=${{ env.NEW_TEMPLATE_NAME }} \
          --region=${{ vars.REGION }}

    - name: Start Rolling Update
      run: |
        gcloud compute instance-groups managed rolling-action start-update ${{ vars.MIG_NAME }} \
          --version=template=${{ env.NEW_TEMPLATE_NAME }} \
          --type=proactive \
          --region=${{ vars.REGION }}
      continue-on-error: true

    - name: Wait for Managed Instance Group Refresh
      id: wait-refresh
      run: |
        sleep 120

    - name: Monitor Managed Instance Group Refresh
      run: |
        output=$(gcloud compute instance-groups managed wait-until ${{ vars.MIG_NAME }} --region=${{ vars.REGION }} --stable
        if [[ $output == *"Group is stable"* ]]; then
          echo "Managed instance group refresh completed successfully."
          return 0
        else
          echo "Managed instance group refresh failed."
          exit 1
        fi
